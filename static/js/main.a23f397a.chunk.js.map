{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","purple","secondary","grey","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","TextFieldWithLongLabel","props","label","value","changeHandler","Fragment","Typography","variant","TextField","type","defaultValue","onChange","InputLabelProps","shrink","fullWidth","App","classes","useState","numberOfDaysPerDoubling","numberOfDaysFromInfectionToDeath","mortalityRate","numberOfDaysFromInfectionToHospitalization","hopistalizationRate","numberOfDaysFromInjectionToOutOfHospital","options","setOptions","model","Model","data","Array","from","_","day","filter","map","dataset","ofDay","name","numberOfCases","toFixed","numberOfDeaths","numberHospitalized","numberInHospitalAtTheTime","attribute","e","Number","target","ThemeProvider","Container","maxWidth","disableGutters","AppBar","position","elevation","Toolbar","IconButton","edge","className","aria-label","Grid","container","item","xs","sm","Paper","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a23f397a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport Container from '@material-ui/core/Container';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport purple from '@material-ui/core/colors/purple';\nimport grey from '@material-ui/core/colors/grey';\n\nimport { Model } from 'coronavirus-epidemiology-model';\n\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n} from 'recharts';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: grey,\n  },\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction TextFieldWithLongLabel(props) {\n  const {\n    label,\n    value,\n    changeHandler\n  } = props;\n\n  return (\n    <React.Fragment>\n      <Typography variant='overline'>\n        {label}\n      </Typography>\n      <TextField\n        type=\"number\"\n        defaultValue={value}\n        onChange={changeHandler}\n        InputLabelProps={{ shrink: true, }}\n        fullWidth\n      />\n    </React.Fragment>\n  );\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [options, setOptions] = useState({\n    numberOfDaysPerDoubling: 7,\n    numberOfDaysFromInfectionToDeath: 20,\n    mortalityRate: 0.015,\n    numberOfDaysFromInfectionToHospitalization: 12,\n    hopistalizationRate: 0.2,\n    numberOfDaysFromInjectionToOutOfHospital: 40,\n  });\n\n  const model = new Model(options);\n  const days = Array.from(new Array(180), (_, day) => day + 1).filter((day) => day % 7 === 0);\n\n  const data = days.map((day) => {\n    const dataset = model.ofDay(day);\n\n    return {\n      name: day,\n      numberOfCases: dataset.numberOfCases.toFixed(0),\n      numberOfDeaths: dataset.numberOfDeaths.toFixed(0),\n      numberHospitalized: dataset.numberHospitalized.toFixed(0),\n      numberInHospitalAtTheTime: dataset.numberInHospitalAtTheTime.toFixed(0),\n    };\n  });\n\n  const changeHandler = (attribute) => (e) => {\n    setOptions({\n      ...options,\n      [attribute]: Number(e.target.value),\n    });\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container\n        maxWidth={false}\n        disableGutters={true}\n      >\n        <AppBar position=\"static\" elevation={0}>\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Coronavirus Epidemiology Model\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container\n          maxWidth={false}\n          disableGutters={true}\n        >\n          <Grid container spacing={0}>\n            <Grid item xs={4} sm={2}>\n              <Paper elevation={0} className={classes.paper}>\n                <TextFieldWithLongLabel\n                  label='Number of days per doubling'\n                  value={options.numberOfDaysPerDoubling}\n                  changeHandler={changeHandler('numberOfDaysPerDoubling')}\n                />\n                <TextFieldWithLongLabel\n                  label='Number of days from infection to death'\n                  value={options.numberOfDaysFromInfectionToDeath}\n                  changeHandler={changeHandler('numberOfDaysFromInfectionToDeath')}\n                />\n                <TextFieldWithLongLabel\n                  label='Mortality rate'\n                  value={options.mortalityRate}\n                  changeHandler={changeHandler('mortalityRate')}\n                />\n                <TextFieldWithLongLabel\n                  label='Number of days from infection to hospitalization'\n                  value={options.numberOfDaysFromInfectionToHospitalization}\n                  changeHandler={changeHandler('numberOfDaysFromInfectionToHospitalization')}\n                />\n                <TextFieldWithLongLabel\n                  label='Number of days from infection to out of hospital (average death or recovery)'\n                  value={options.numberOfDaysFromInjectionToOutOfHospital}\n                  changeHandler={changeHandler('numberOfDaysFromInjectionToOutOfHospital')}\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={20} sm={10}>\n              <Paper elevation={0} className={classes.paper}>\n                <ResponsiveContainer\n                  width='80%'\n                  height={600}\n                >\n                  <LineChart\n                    data={data}\n                    margin={{\n                      top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"numberOfCases\" name=\"Number of Cases\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <Line type=\"monotone\" dataKey=\"numberOfDeaths\" name=\"Number of Deaths\" stroke=\"#82ca9d\" />\n                    <Line type=\"monotone\" dataKey=\"numberHospitalized\" name=\"Number Hospitalized\" stroke=\"#82ca9d\" />\n                    <Line type=\"monotone\" dataKey=\"numberInHospitalAtTheTime\" name=\"Number in hospital at the time\" stroke=\"#82ca9d\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}